# "show arp" parser for Cisco IOS
#

def convert_mac(mac):
  """Converts cisco xxxx.xxxx.xxxx.format to xx:xx:xx:xx:xx:xx format."""
  return '%s:%s:%s:%s:%s:%s' % (mac[0:2],
                                mac[2:4],
                                mac[5:7],
                                mac[7:9],
                                mac[10:12],
                                mac[12:14])



# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class CiscoShowArpScanner(runtime.Scanner):
    patterns = [
        ("'Protocol.*Interface'", re.compile('Protocol.*Interface')),
        ("'ARPA'", re.compile('ARPA')),
        ("'Internet'", re.compile('Internet')),
        ('\\s+', re.compile('\\s+')),
        ('MAC', re.compile('\\S+')),
        ('INTF', re.compile('\\S+')),
        ('END', re.compile('$')),
        ('ANY', re.compile('.')),
        ('IPV4', re.compile('([0-9]{1,3}\\.){3}[0-9]{1,3}')),
        ('AGE', re.compile('([0-9]+|-)')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class CiscoShowArp(runtime.Parser):
    Context = runtime.Context
    def entry(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'entry', [])
        self._scan("'Internet'", context=_context)
        IPV4 = self._scan('IPV4', context=_context)
        AGE = self._scan('AGE', context=_context)
        MAC = self._scan('MAC', context=_context)
        self._scan("'ARPA'", context=_context)
        INTF = self._scan('INTF', context=_context)
        return (('arpv4', IPV4, convert_mac(MAC), INTF))

    def parse(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'parse', [])
        while self._peek("'Protocol.*Interface'", 'ANY', context=_context) == 'ANY':
            ANY = self._scan('ANY', context=_context)
        self._scan("'Protocol.*Interface'", context=_context)
        arps = set()
        while self._peek('END', "'Internet'", context=_context) == "'Internet'":
            entry = self.entry(_context)
            arps.add(entry)
        END = self._scan('END', context=_context)
        return arps


def parse(rule, text):
    P = CiscoShowArp(CiscoShowArpScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
