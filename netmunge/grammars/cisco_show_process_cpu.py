# "show process cpu" parser for Cisco IOS
#

def strip(s):
    return s.strip()


# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class CiscoShowProcessCpuScanner(runtime.Scanner):
    patterns = [
        ("'PID.*Process'", re.compile('PID.*Process')),
        ('\\s+', re.compile('\\s+')),
        ('ANY', re.compile('.')),
        ('END', re.compile('$')),
        ('PID', re.compile('[0-9]+')),
        ('NUM', re.compile('[0-9]+')),
        ('SEC5', re.compile('[0-9\\.%]+')),
        ('MIN1', re.compile('[0-9\\.%]+')),
        ('MIN5', re.compile('[0-9\\.%]+')),
        ('PROC', re.compile('[^ ].+')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class CiscoShowProcessCpu(runtime.Parser):
    Context = runtime.Context
    def row(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'row', [])
        PID = self._scan('PID', context=_context)
        NUM = self._scan('NUM', context=_context)
        NUM = self._scan('NUM', context=_context)
        NUM = self._scan('NUM', context=_context)
        SEC5 = self._scan('SEC5', context=_context)
        MIN1 = self._scan('MIN1', context=_context)
        MIN5 = self._scan('MIN5', context=_context)
        NUM = self._scan('NUM', context=_context)
        PROC = self._scan('PROC', context=_context)
        return (('cpu_process', PID, SEC5, MIN1, MIN5, strip(PROC)))

    def parse(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'parse', [])
        while self._peek("'PID.*Process'", 'ANY', context=_context) == 'ANY':
            ANY = self._scan('ANY', context=_context)
        self._scan("'PID.*Process'", context=_context)
        procs = set()
        while self._peek('END', 'PID', context=_context) == 'PID':
            row = self.row(_context)
            procs.add(row)
        END = self._scan('END', context=_context)
        return procs


def parse(rule, text):
    P = CiscoShowProcessCpu(CiscoShowProcessCpuScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
