# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class TimosShowRouterArpScanner(runtime.Scanner):
    patterns = [
        ("'\\-{3,}'", re.compile('\\-{3,}')),
        ('\\s+', re.compile('\\s+')),
        ('NUM', re.compile('[0-9]+')),
        ('WORD', re.compile('\\S+')),
        ('INTF', re.compile('\\S+')),
        ('END', re.compile('$')),
        ('ANY', re.compile('.')),
        ('IPV4', re.compile('([0-9]{1,3}\\.){3}[0-9]{1,3}')),
        ('MAC', re.compile('([0-9a-f]{2}:){5}[0-9a-f]{2}')),
        ('EXPIRY', re.compile('[0-9]{2}h[0-9]{2}m[0-9]{2}s')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class TimosShowRouterArp(runtime.Parser):
    Context = runtime.Context
    def entry(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'entry', [])
        IPV4 = self._scan('IPV4', context=_context)
        MAC = self._scan('MAC', context=_context)
        EXPIRY = self._scan('EXPIRY', context=_context)
        WORD = self._scan('WORD', context=_context)
        INTF = self._scan('INTF', context=_context)
        return (('arp3tuple', IPV4, MAC, INTF))

    def parse(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'parse', [])
        while self._peek("'\\-{3,}'", 'ANY', context=_context) == 'ANY':
            ANY = self._scan('ANY', context=_context)
        self._scan("'\\-{3,}'", context=_context)
        arps = set()
        while self._peek("'\\-{3,}'", 'IPV4', context=_context) == 'IPV4':
            entry = self.entry(_context)
            arps.add(entry)
        self._scan("'\\-{3,}'", context=_context)
        return arps


def parse(rule, text):
    P = TimosShowRouterArp(TimosShowRouterArpScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
