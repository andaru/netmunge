# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class TimosShowPortDescriptionScanner(runtime.Scanner):
    patterns = [
        ("'Port.*Slot .+'", re.compile('Port.*Slot .+')),
        ("'Port Id.*Description'", re.compile('Port Id.*Description')),
        ("'\\-*'", re.compile('\\-*')),
        ('\\s+', re.compile('\\s+')),
        ('PORT', re.compile('[0-9/\\.A-Za-z]+')),
        ('DESC', re.compile('.*\n')),
        ('END', re.compile('$')),
        ('ANY', re.compile('.')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class TimosShowPortDescription(runtime.Parser):
    Context = runtime.Context
    def entry(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'entry', [])
        PORT = self._scan('PORT', context=_context)
        DESC = self._scan('DESC', context=_context)
        return (('interface_description', PORT.strip(), DESC.strip()))

    def parse(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'parse', [])
        while self._peek("'\\-*'", 'ANY', context=_context) == 'ANY':
            ANY = self._scan('ANY', context=_context)
        self._scan("'\\-*'", context=_context)
        intf = set()
        while self._peek('END', "'Port Id.*Description'", "'Port.*Slot .+'", 'ANY', 'PORT', context=_context) != 'END':
            _token = self._peek("'Port Id.*Description'", "'Port.*Slot .+'", 'ANY', 'PORT', context=_context)
            if _token == "'Port Id.*Description'":
                self._scan("'Port Id.*Description'", context=_context)
            elif _token == "'Port.*Slot .+'":
                self._scan("'Port.*Slot .+'", context=_context)
            elif _token == 'ANY':
                ANY = self._scan('ANY', context=_context)
            else: # == 'PORT'
                entry = self.entry(_context)
                intf.add(entry)
        END = self._scan('END', context=_context)
        return intf


def parse(rule, text):
    P = TimosShowPortDescription(TimosShowPortDescriptionScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
