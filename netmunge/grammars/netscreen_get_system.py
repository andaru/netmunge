# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class NetscreenGetSystemScanner(runtime.Scanner):
    patterns = [
        ("'.'", re.compile('.')),
        ('"File Name:"', re.compile('File Name:')),
        ('"Hardware Version:"', re.compile('Hardware Version:')),
        ('"Serial Number:"', re.compile('Serial Number:')),
        ('"Product Name:"', re.compile('Product Name:')),
        ('\\s+', re.compile('\\s+')),
        ('NUM', re.compile('[0-9]+')),
        ('WORD', re.compile('\\S+')),
        ('END', re.compile('$')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class NetscreenGetSystem(runtime.Parser):
    Context = runtime.Context
    def item(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'item', [])
        _token = self._peek('"Product Name:"', '"Serial Number:"', '"Hardware Version:"', '"File Name:"', context=_context)
        if _token == '"Product Name:"':
            self._scan('"Product Name:"', context=_context)
            WORD = self._scan('WORD', context=_context)
            return ('product_name', WORD)
        elif _token == '"Serial Number:"':
            self._scan('"Serial Number:"', context=_context)
            NUM = self._scan('NUM', context=_context)
            return ('serial', NUM)
        elif _token == '"Hardware Version:"':
            self._scan('"Hardware Version:"', context=_context)
            WORD = self._scan('WORD', context=_context)
            return ('hardware_version', WORD)
        else: # == '"File Name:"'
            self._scan('"File Name:"', context=_context)
            WORD = self._scan('WORD', context=_context)
            return ('image_name', WORD)

    def get_system(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'get_system', [])
        l = set()
        while self._peek('END', '"Product Name:"', '"Serial Number:"', '"Hardware Version:"', '"File Name:"', "'.'", context=_context) != 'END':
            _token = self._peek('"Product Name:"', '"Serial Number:"', '"Hardware Version:"', '"File Name:"', "'.'", context=_context)
            if _token != "'.'":
                item = self.item(_context)
                l.add(item)
            else: # == "'.'"
                self._scan("'.'", context=_context)
        END = self._scan('END', context=_context)
        return l


def parse(rule, text):
    P = NetscreenGetSystem(NetscreenGetSystemScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
