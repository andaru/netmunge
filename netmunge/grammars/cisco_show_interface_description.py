# "show arp" parser for Cisco IOS
#

def _d(oper_status):
  """Returns the description from the mixed oper status/optional description"""
  if 'up' in oper_status:
    return oper_status.split('up')[1].strip()
  else:
    return oper_status.split('down')[1].strip()



# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class CiscoShowInterfaceDescriptionScanner(runtime.Scanner):
    patterns = [
        ("'Interface.*Description'", re.compile('Interface.*Description')),
        ('\\s+', re.compile('\\s+')),
        ('INTF', re.compile('[A-ZA-z]{2,3}[0-9/\\.]+')),
        ('END', re.compile('$')),
        ('ANY', re.compile('.')),
        ('OPER', re.compile('(up|down|admin down).*')),
        ('ADMIN', re.compile('(up|down|admin down)')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class CiscoShowInterfaceDescription(runtime.Parser):
    Context = runtime.Context
    def entry(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'entry', [])
        INTF = self._scan('INTF', context=_context)
        ADMIN = self._scan('ADMIN', context=_context)
        OPER = self._scan('OPER', context=_context)
        return (('interface_description', INTF, _d(OPER)))

    def parse(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'parse', [])
        while self._peek("'Interface.*Description'", 'ANY', context=_context) == 'ANY':
            ANY = self._scan('ANY', context=_context)
        self._scan("'Interface.*Description'", context=_context)
        ints = set()
        while self._peek('END', 'INTF', context=_context) == 'INTF':
            entry = self.entry(_context)
            ints.add(entry)
        END = self._scan('END', context=_context)
        return ints


def parse(rule, text):
    P = CiscoShowInterfaceDescription(CiscoShowInterfaceDescriptionScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
